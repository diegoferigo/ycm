sudo: false
dist: trusty
language: cpp

os:
  - linux

services:
  - docker

compiler: gcc

env:
  matrix:
    # Unix Makefiles
    - CMAKE_VER=3.0.2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.1.3 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.2.3 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.3.2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.4.3 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.5.2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.6.3 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.7.2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - CMAKE_VER=3.8.0-rc2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    # Ninja
    - CMAKE_VER=3.0.2 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.1.3 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.2.3 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.3.2 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.4.3 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.5.2 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.6.3 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.7.2 TRAVIS_CMAKE_GENERATOR="Ninja"
    - CMAKE_VER=3.8.0-rc2 TRAVIS_CMAKE_GENERATOR="Ninja"
  global:
    - PROJECT_DIR_ABS=$TRAVIS_BUILD_DIR
    - TRAVIS_BUILD_TYPE=Release
    - CMAKE_CACHE_DIR=$HOME/.cmake
    - CTEST_OUTPUT_ON_FAILURE=1

matrix:
  include:
    - os: osx
      osx_image: xcode7.3
      env: CMAKE_VER=3.6.2 TRAVIS_CMAKE_GENERATOR="Xcode"
    - os: osx
      osx_image: xcode7.3
      env: CMAKE_VER=3.6.2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
  # Allow failures on jobs with experimental features
  allow_failures:
    - env: CMAKE_VER=3.8.0-rc2 TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - env: CMAKE_VER=3.8.0-rc2 TRAVIS_CMAKE_GENERATOR="Ninja"
  fast_finish: true

branches:
  except:
  - gh-pages
  - appveyor

cache:
  directories:
    - $CMAKE_CACHE_DIR

before_install:
  - >-
    if [[ "$TRAVIS_OS_NAME" = "linux" ]] ; then
      # Set project variables
      cd $PROJECT_DIR_ABS
      CMAKE_VER_SPLIT=(${CMAKE_VER//./ })
      CMAKE_MAJOR=${CMAKE_VER_SPLIT[0]}
      CMAKE_MINOR=${CMAKE_VER_SPLIT[1]}
      CMAKE_PATCH=${CMAKE_VER_SPLIT[2]}
      CMAKE_ARCH=x86_64
      CMAKE_DEPS=(make libidn11 ninja-build)
      if [ "$CMAKE_VER" = "3.0.2" ] ; then
        CMAKE_DEPS+=(libc6-i386)
        CMAKE_ARCH=i386
      fi
      CMAKE_DIR=cmake-$CMAKE_MAJOR.$CMAKE_MINOR.$CMAKE_PATCH-Linux-$CMAKE_ARCH
      # Retrieve the docker image
      docker pull ubuntu
      # Install dependencies into the docker image
      docker run -it \
        --name baseimage \
        -e CMAKE_DEPS="${CMAKE_DEPS[*]}" \
        ubuntu \
        sh -c 'apt-get update && apt-get install -y $CMAKE_DEPS'
      docker commit baseimage imagewithdeps
      # Download the CMake version archive and cache it
      if [ ! -d $CMAKE_CACHE_DIR/$CMAKE_DIR ] ; then
        cd $CMAKE_CACHE_DIR
        curl -N "https://cmake.org/files/v$CMAKE_MAJOR.$CMAKE_MINOR/$CMAKE_DIR.tar.gz" | tar xz
      else
        echo "CMake directory found in cache"
      fi
    fi

before_script:
  - cd $PROJECT_DIR_ABS
  - mkdir build
  - cd build
  # Configure the project
  - >-
    if [[ "$TRAVIS_OS_NAME" = "osx" ]] ; then
      cmake --version
      cmake .. \
            -G"${TRAVIS_CMAKE_GENERATOR}" \
            -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/../install \
            -DYCM_MAINTAINER_MODE=ON
    elif [[ "$TRAVIS_OS_NAME" = "linux" ]] ; then
      docker run -it --rm \
        -v "$CMAKE_CACHE_DIR/$CMAKE_DIR:/cmake" \
        -e CMAKE_PATH=/cmake/bin/ \
        -e CMAKE_XDG=/cmake/share \
        imagewithdeps \
        sh -c 'PATH=$CMAKE_PATH:$PATH XDG_DATA_DIRS=$CMAKE_XDG:$XGD_DATA_DIRS
          cmake --version'
      docker run -it --rm \
        -v "$PROJECT_DIR_ABS:/app" \
        -w /app/build \
        -v "$CMAKE_CACHE_DIR/$CMAKE_DIR:/cmake" \
        -e CMAKE_PATH=/cmake/bin/ \
        -e CMAKE_XDG=/cmake/share \
        -e TRAVIS_BUILD_TYPE \
        -e TRAVIS_CMAKE_GENERATOR \
        imagewithdeps \
        sh -c 'PATH=$CMAKE_PATH:$PATH XDG_DATA_DIRS=$CMAKE_XDG:$XGD_DATA_DIRS
          cmake \
            -G"${TRAVIS_CMAKE_GENERATOR}" \
            -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} \
            -DYCM_MAINTAINER_MODE=ON \
            ..'
    fi

script:
  # Build the project
  - >-
    if [[ "$TRAVIS_OS_NAME" = "osx" ]] ; then
      cmake --build . --config ${TRAVIS_BUILD_TYPE}
    elif [[ "$TRAVIS_OS_NAME" = "linux" ]] ; then
      docker run -it --rm \
        -v "$PROJECT_DIR_ABS:/app" \
        -w /app/build \
        -v "$CMAKE_CACHE_DIR/$CMAKE_DIR:/cmake" \
        -e CMAKE_PATH=/cmake/bin/ \
        -e CMAKE_XDG=/cmake/share \
        -e TRAVIS_BUILD_TYPE \
        imagewithdeps \
        sh -c 'PATH=$CMAKE_PATH:$PATH XDG_DATA_DIRS=$CMAKE_XDG:$XGD_DATA_DIRS
          cmake --build . --config ${TRAVIS_BUILD_TYPE}'
    fi

  # Install and test the project
  - >-
    if [[ "$TRAVIS_OS_NAME" = "osx" ]] ; then
      cmake --build . --config ${TRAVIS_BUILD_TYPE} --target install
      ctest --build . --config ${TRAVIS_BUILD_TYPE}
    elif [[ "$TRAVIS_OS_NAME" = "linux" ]] ; then
      docker run -it \
        --name imagewithdepsname \
        -v "$PROJECT_DIR_ABS:/app" \
        -w /app/build \
        -v "$CMAKE_CACHE_DIR/$CMAKE_DIR:/cmake" \
        -e CMAKE_PATH=/cmake/bin/ \
        -e CMAKE_XDG=/cmake/share \
        -e TRAVIS_BUILD_TYPE \
        imagewithdeps \
        sh -c 'PATH=$CMAKE_PATH:$PATH XDG_DATA_DIRS=$CMAKE_XDG:$XGD_DATA_DIRS
          cmake --build . --config ${TRAVIS_BUILD_TYPE} --target install'
        docker commit imagewithdepsname imagewithycm
      docker run -it --rm \
        -v "$PROJECT_DIR_ABS:/app" \
        -w /app/build \
        -v "$CMAKE_CACHE_DIR/$CMAKE_DIR:/cmake" \
        -e CMAKE_PATH=/cmake/bin/ \
        -e CMAKE_XDG=/cmake/share \
        -e TRAVIS_BUILD_TYPE \
        -e CTEST_OUTPUT_ON_FAILURE \
        imagewithycm \
        sh -c 'PATH=$CMAKE_PATH:$PATH XDG_DATA_DIRS=$CMAKE_XDG:$XGD_DATA_DIRS
          ctest --build . --config ${TRAVIS_BUILD_TYPE}'
    fi
